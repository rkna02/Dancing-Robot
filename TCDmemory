import time  
import board
import pwmio
import pulseio
import simpleio
from adafruit_motor import servo

import terminalio
import displayio
from adafruit_display_text import label
from adafruit_st7735r import ST7735R
import os

import digitalio
import adafruit_matrixkeypad

import buzzer

# import gc

# display set up and initialization
displayio.release_displays()

spi = board.SPI()
tft_cs = board.D13
tft_dc = board.D7

display_bus = displayio.FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D0)
display = ST7735R(display_bus, width=128, height=128, rotation=90)

splash = displayio.Group()
display.show(splash)

def main_menu_display():
    """
        Displays the main menu of the robot with bitmaps and texts
        Prompts user for a key from 1-2 and performs their corresponding actions
        If other keys are pressed, display will show an error
        1 - navigates user to a new page where the user can choose individual dance moves to perform
        2 - click to immediately perform all dance moves at once
    """

    # set up bitmaps for backgrounds
    color_bitmap = displayio.Bitmap(128, 128, 1)
    button1_bitmap = displayio.Bitmap(20, 55, 1)
    button2_bitmap = displayio.Bitmap(20, 55, 1)
    description1_bitmap = displayio.Bitmap(95, 55, 1)
    description2_bitmap = displayio.Bitmap(95, 55, 1)

    # set up color palettes
    color_palette = displayio.Palette(1)
    color_palette[0] = 0x221D61  # Dark blue as background
    button_palette = displayio.Palette(1)
    button_palette[0] = 0x89CFF0  # light blue buttons
    description_palette = displayio.Palette(1)
    description_palette[0] = 0x0B41E0  # average blue background for description

    # set up formatting and placements
    bg_sprite = displayio.TileGrid(color_bitmap, pixel_shader=color_palette, x=0, y=0)
    button1_sprite = displayio.TileGrid(button1_bitmap, pixel_shader=button_palette, x=8, y=6)
    button2_sprite = displayio.TileGrid(button2_bitmap, pixel_shader=button_palette, x=8, y=66)
    description1_sprite = displayio.TileGrid(description1_bitmap, pixel_shader=description_palette, x=28, y=6)
    description2_sprite = displayio.TileGrid(description2_bitmap, pixel_shader=description_palette, x=28, y=66)

    # set up button and description texts
    text_one = label.Label(terminalio.FONT, text="1", scale=3, color=0xFFFFFF, x=11, y=30)
    text_two = label.Label(terminalio.FONT, text="2", scale=3, color=0xFFFFFF, x=11, y=90)
    text_description1 = label.Label(
        terminalio.FONT, text="Choose a\nsequence of\ndance moves!", color=0xFFFFFF, x=32, y=15
    )
    text_description2 = label.Label(terminalio.FONT, text="Perform all\ndance moves!", color=0xFFFFFF, x=32, y=75)

    # append and show display
    splash.append(bg_sprite)
    splash.append(button1_sprite)
    splash.append(button2_sprite)
    splash.append(description1_sprite)
    splash.append(description2_sprite)
    splash.append(text_one)
    splash.append(text_two)
    splash.append(text_description1)
    splash.append(text_description2)


def sub_menu1_display():
    """
        Displays the menu when user choosess option 1 from the main menu of the robot
        Prompts user for a key from 1-6 and performs the corresponding dance moves
        If other keys are pressed, display will show an error
    """

    color_bitmap = displayio.Bitmap(128, 128, 1)
    color_palette = displayio.Palette(1)
    color_palette[0] = 0x221D61  # average blue as background

    bg_sprite = displayio.TileGrid(color_bitmap, pixel_shader=color_palette, x=0, y=0)

    # Create bitmaps for the buttons
    button1_bitmap = displayio.Bitmap(36, 36, 1)
    button2_bitmap = displayio.Bitmap(36, 36, 1)
    button3_bitmap = displayio.Bitmap(36, 36, 1)
    button4_bitmap = displayio.Bitmap(36, 36, 1)
    button5_bitmap = displayio.Bitmap(36, 36, 1)
    button6_bitmap = displayio.Bitmap(36, 36, 1)

    # Create palette for the button color
    button_palette = displayio.Palette(1)
    button_palette[0] = 0x89CFF0  # light blue buttons

    # created button backgrounds for the dance moves
    button1_sprite = displayio.TileGrid(button1_bitmap, pixel_shader=button_palette, x=7, y=35)
    button2_sprite = displayio.TileGrid(button2_bitmap, pixel_shader=button_palette, x=48, y=35)
    button3_sprite = displayio.TileGrid(button3_bitmap, pixel_shader=button_palette, x=89, y=35)
    button4_sprite = displayio.TileGrid(button4_bitmap, pixel_shader=button_palette, x=7, y=75)
    button5_sprite = displayio.TileGrid(button5_bitmap, pixel_shader=button_palette, x=48, y=75)
    button6_sprite = displayio.TileGrid(button6_bitmap, pixel_shader=button_palette, x=89, y=75)

    # Create button numbers
    prompt = "Choose your dances!"
    text_label = label.Label(terminalio.FONT, text=prompt, color=0xFFFFFF, x=10, y=15)
    text_one_sub = label.Label(terminalio.FONT, text="1", scale=2, color=0xFFFFFF, x=20, y=51)
    text_two_sub = label.Label(terminalio.FONT, text="2", scale=2, color=0xFFFFFF, x=61, y=51)
    text_three = label.Label(terminalio.FONT, text="3", scale=2, color=0xFFFFFF, x=102, y=51)
    text_four = label.Label(terminalio.FONT, text="4", scale=2, color=0xFFFFFF, x=20, y=91)
    text_five = label.Label(terminalio.FONT, text="5", scale=2, color=0xFFFFFF, x=61, y=91)
    text_six = label.Label(terminalio.FONT, text="6", scale=2, color=0xFFFFFF, x=102, y=91)

    # append and display menu
    splash.append(bg_sprite)
    splash.append(button1_sprite)
    splash.append(button2_sprite)
    splash.append(button3_sprite)
    splash.append(button4_sprite)
    splash.append(button5_sprite)
    splash.append(button6_sprite)
    splash.append(text_label)
    splash.append(text_one_sub)
    splash.append(text_two_sub)
    splash.append(text_three)
    splash.append(text_four)
    splash.append(text_five)
    splash.append(text_six)


def sub_menu2_display():
    """
        Displays the menu when user choosess option 2 from the main menu of the robot
        Prompts user for a key from 7-8 and performs the corresponding dance moves
        If other keys are pressed, display will show an error
    """

    # set up bitmaps for backgrounds
    color_bitmap = displayio.Bitmap(128, 128, 1)
    button1_bitmap = displayio.Bitmap(20, 55, 1)
    button2_bitmap = displayio.Bitmap(20, 55, 1)
    description1_bitmap = displayio.Bitmap(95, 55, 1)
    description2_bitmap = displayio.Bitmap(95, 55, 1)

    # set up color palettes
    color_palette = displayio.Palette(1)
    color_palette[0] = 0x221D61  # Dark blue as background
    button_palette = displayio.Palette(1)
    button_palette[0] = 0x89CFF0  # light blue buttons
    description_palette = displayio.Palette(1)
    description_palette[0] = 0x0B41E0  # average blue background for description

    # set up formatting and placements
    bg_sprite = displayio.TileGrid(color_bitmap, pixel_shader=color_palette, x=0, y=0)
    button1_sprite = displayio.TileGrid(button1_bitmap, pixel_shader=button_palette, x=8, y=6)
    button2_sprite = displayio.TileGrid(button2_bitmap, pixel_shader=button_palette, x=8, y=66)
    description1_sprite = displayio.TileGrid(description1_bitmap, pixel_shader=description_palette, x=28, y=6)
    description2_sprite = displayio.TileGrid(description2_bitmap, pixel_shader=description_palette, x=28, y=66)

    # set up button and description texts
    text_one = label.Label(terminalio.FONT, text="7", scale=3, color=0xFFFFFF, x=11, y=30)
    text_two = label.Label(terminalio.FONT, text="8", scale=3, color=0xFFFFFF, x=11, y=90)
    text_description1 = label.Label(
        terminalio.FONT, text="Perform\ndances from\ndance1->dance6", color=0xFFFFFF, x=32, y=15
    )
    text_description2 = label.Label(
        terminalio.FONT, text="Perform\ndance from\ndance6->dance1", color=0xFFFFFF, x=32, y=75
    )

    # append and show display
    splash.append(bg_sprite)
    splash.append(button1_sprite)
    splash.append(button2_sprite)
    splash.append(description1_sprite)
    splash.append(description2_sprite)
    splash.append(text_one)
    splash.append(text_two)
    splash.append(text_description1)
    splash.append(text_description2)


def error_display():
    """ Displays error message on LCD screen when an invalid button is pressed
        Different buttons can be invalid based on the current menu
        Please see menu functions for specific details
    """

    # define and display background of error message
    color_bitmap = displayio.Bitmap(128, 128, 1)
    color_palette = displayio.Palette(1)
    color_palette[0] = 0x221D61  # Dark blue as background
    bg_sprite = displayio.TileGrid(color_bitmap, pixel_shader=color_palette, x=0, y=0)
    splash.append(bg_sprite)

    text_error = label.Label(terminalio.FONT, text="ERROR:\nINVALID\nBUTTON", color=0xFFFFFF, scale=2, x=25, y=28)
    splash.append(text_error)

    # shows error message for 2 seconds then erases it
    time.sleep(2)
    splash.pop()
    splash.pop()


def clear_menu(menu):
    """ Clears everything from the current menu 
        Only keeps the background, which is the same for every menu
        PARAM menu: must be one of the strings "main_menu", "sub_menu1", "sub_menu2"
    """

    if menu == "sub_menu1":
        for i in range(0, 11):
            splash.pop()
    elif menu == "main_menu" or menu == "sub_menu2":
        for i in range(0, 8):
            splash.pop()


def loading(move):
    """
        shows the loading screen before performing dance moves
        PARAM move: the dance move reference number
    """

    # directory on CIRCUITPY where BMP animation frames are stored
    GIF_files = os.listdir("/GIF/loading")
    count = 0

    for name in GIF_files:
        filename = "/GIF/loading" + "/" + name
        bitmap, palette = adafruit_imageload.load(filename, bitmap=displayio.Bitmap, palette=displayio.Palette)
        tile_grid = displayio.TileGrid(bitmap, pixel_shader=palette)  # Create a TileGrid to hold the bitmap
        move_name = "MOVE " + move
        text = label.Label(terminalio.FONT, text=move_name, color=0x000000, scale=2, x=15, y=100)
        splash.append(tile_grid)  # Add the TileGrid to the Group
        splash.append(text)
        count = count + 1
        print("after frame")
        print(count)
        print(gc.mem_free())

    for i in range(0, count):
        splash.pop()


print("begin program")
print(gc.mem_free())
while True:
    main_menu_display()
    print("after set up main menu")
    print(gc.mem_free())
    time.sleep(2)

    clear("main_menu")
    print("after clear")
    print(gc.mem_free())
    time.sleep(2)

    loading("1")
    print("after displaying gif")
    print(gc.mem_free())
    sleep(1000)
